============================================
Tutorial 2: Using the EasyBuild build system
============================================

In this tutorial we will present how to build and install software in a ReFrame test given an EasyBuild easyconfig file.
The example uses the configuration file presented in :doc:`tutorial_basics`, which you can find in ``tutorials/config/settings.py``.
We also assume that the reader is already familiar with the concepts presented in the basic tutorial and has a working knowledge of EasyBuild.
Finally, to avoid specifying the tutorial configuration file each time you run the test, make sure to export it here:

.. code:: bash

   export RFM_CONFIG_FILE=$(pwd)/tutorials/config/mysettings.py



Basic test using EasyBuild
----------------------------

Let's consider a simple ReFrame test that installs ``bzip2-1.0.6`` given the easyconfig `bzip2-1.0.6.eb <https://github.com/eth-cscs/production/blob/master/easybuild/easyconfigs/b/bzip2/bzip2-1.0.6.eb>`__ and checks that the installed version is correct.
The following code block shows the check, highlighting the lines specific to this tutorial:


.. literalinclude:: ../tutorials/build_systems/easybuild/eb_test.py
   :emphasize-lines: 5-8,19-21

The test looks pretty standard except for the highlighted blocks.
Let's have a look first to the block in the ``BZip2Check`` class.

The first thing is to specify that the EasyBuild build system will be used.
This is done by setting :attr:`~reframe.core.pipeline.RegressionTest.build_system` to ``'EasyBuild'``.
Then, the software to be installed is passed as a list to :attr:`~reframe.core.buildsystems.EasyBuild.easyconfigs`.
Here only one easyconfig is given, but more than one can be passed.
Finally, through :attr:`~reframe.core.buildsystems.EasyBuild.options`, command line options can be passed to the ``eb`` executable.
In this test we pass ``-f`` to make sure that ``bzip2`` will be built even if the module already exists externally.

For this test, ReFrame generates the following command to build and install the easyconfig:

.. code-block:: console

   eb bzip2-1.0.6.eb -f

All the files generated by this command i.e. the sources, temporary files, installed software and the corresponding modules, are located in the folder ``easybuild`` in the stage directory.

Now that we know everything related to building and installing the code, we can move to the part dealing with running it.
To run the code, the generated modules need to be loaded in order to make the software available.
The modules can be accessed through :attr:`~reframe.core.buildsystems.Easybuild.generated_modules`, however, they are available only after EasyBuild completes the installation.
This means that :attr:`~reframe.core.pipeline.RegressionTest.modules` can be set only after the build phase finishes.
For that, we can set :attr:`~reframe.core.pipeline.RegressionTest.modules` in a class method wrapped by the :py:func:`~reframe.core.decorators.run_before` decorator, specifying the ``run`` phase.
In this test this is done by the function ``prepare_run()`` of the mixin class ``EasybuildMixin`` which is a parent class of the regression test.
Writing this as a mixin class is a convenient way of creating a block of code that can be easily reused for other tests.
This test will then run the following commands:

.. code-block:: console

   module load bzip/1.06
   bzip2 --help

Since all the EasyBuild files are in the stage directory, unless ReFrame was run with ``--keep-stage-files``, they are going to be wiped out if the test is successful.
The :attr:`~reframe.core.pipeline.RegressionTest.keep_files` attribute can be used to avoid that:

.. code-block:: python

   self.keep_files = ['easybuild']



Packaging the installation
--------------------------

The EasyBuild build system offers a way of packaging the installation via EasyBuild's packaging support.
To use this feature, `the FPM package manager <https://fpm.readthedocs.io/en/latest/intro.html>`__ must be available.
By setting the dictionary :attr:`~reframe.core.buildsystems.Easybuild.package_opts` in the test, ReFrame will pass ``--package-{key}={val}`` to the EasyBuild invocation.
For instance, the following can be set to package the installations as an rpm file:

.. code-block:: python

   self.keep_files = ['easybuild/packages']
   self.build_system.package_opts = {
           'type': 'rpm',
        }

The packages are generated by EasyBuild in the stage directory.
To retain them after the test succeeds, :attr:`~reframe.core.pipeline.RegressionTest.keep_files` needs to be set.
